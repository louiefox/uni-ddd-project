@using DDDProject.Data;
@inject SocietyDataService societyDataService

@page "/"

<div class="container">
    <div class="left-side">
        <div class="search-bars">
            <div class="search-box">
                <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
                <input type ="text" placeholder="Find Events" @bind="@searchEventsInput" @oninput="@((e) => refreshEventSearch((string)e.Value))" @onfocus="@startSearchingEvents" @onblur="@clearSearching">
            </div>
            <div class="search-box">
                <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
                <input type ="text" placeholder="Find Societies" @bind="@searchSocietiesInput" @oninput="@((e) => refreshSocietiesSearch((string)e.Value))" @onfocus="@startSearchingSocieties" @onblur="@clearSearching">
            </div>
        </div>
        @if (!isSearchingEvents && !isSearchingSocieties)
        {
            <div class="content-area">
                <div class="anouncements">
                    <h1>Anouncements</h1>
                    <h3>The hoodies are ready! Come to the next meeting to collect yours</h3>
                    <p>Gaming Society</p>
                    <h3>Come to the next meeting to decide on our next movie.</h3>
                    <p>Book Society</p>
                </div>
                <div class="events-section"> 
                    <h1>Upcoming Public Events</h1> 

                    @foreach (EventData eventData in latestEvents)
                    {
                        <div class="card">
                            <div class="blank-event"/>
                            <h1>@eventData.Name</h1>
                            <h2>@eventData.SocietyName Society</h2>
                            <h3>@eventData.DateLocation</h3>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="search-area">
                @if (isSearchingEvents)
                {
                    @foreach (EventData eventData in searchResultsEvents)
                    {
                        <div class="search-event-card">
                            <div class="search-event-display"/>
                            <h1>@eventData.Name</h1>
                            <h2>@eventData.SocietyName Society</h2>
                            <h3>@eventData.DateLocation</h3>
                        </div>
                    }
                }
                else
                {
                    @foreach (SocietyData society in searchResultsSocieties)
                    {
                        <a class="society-card">
                            <span class="oi oi-@society.Icon" aria-hidden="true"></span>
                            <h2>@society.Name</h2>
                        </a>
                    }
                }
            </div>
        }
    </div>
    <div class="calendar">
        <h1>Calendar</h1>
        <span class="calendar-date"><h2>19th Feb</h2></span>
        <h3>Terrarium making</h3>
        <h4>Plant Society</h4>
        <span class="calendar-date"><h2>23rd Feb</h2></span>
        <h3>Movie night</h3>
        <h4>Book Society</h4>
        <span class="calendar-date"></span>
        <div class="calendar-notice">No more events in your calendar</div> 
    </div>
</div>

@code {
    private bool isSearchingEvents = false;
    private bool isSearchingSocieties = false;
    private string searchEventsInput { get; set; } = "";
    private string searchSocietiesInput { get; set; } = "";
    private List<EventData> eventsList;
    private List<EventData> searchResultsEvents = new();
    private List<EventData> latestEvents = new();
    private List<SocietyData> societiesList;
    private List<SocietyData> searchResultsSocieties = new();

    protected override async Task OnInitializedAsync()
    {
        societiesList = await societyDataService.RequestSocietiesList();
        eventsList = await societyDataService.RequestEventsList();

        for(int i = 0; i < 3; i++)
        {
            latestEvents.Add(eventsList.ToArray()[i]);
        }
    }

    private void refreshEventSearch(string input)
    {
        searchEventsInput = input.ToLower();

        searchResultsEvents.Clear();

        foreach (EventData eventData in eventsList)
        {
            if(!eventData.Name.ToLower().Contains(searchEventsInput))
                continue;

            searchResultsEvents.Add(eventData);
        }
    }

    private void refreshSocietiesSearch(string input)
    {
        searchSocietiesInput = input.ToLower();

        searchResultsSocieties.Clear();

        foreach (SocietyData society in societiesList)
        {
            if(!society.Name.ToLower().Contains(searchSocietiesInput))
                continue;

            searchResultsSocieties.Add(society);
        }
    }

    private void startSearchingEvents()
    {
        isSearchingEvents = true;
        refreshEventSearch("");
    }

    private void startSearchingSocieties()
    {
        isSearchingSocieties = true;
        refreshSocietiesSearch("");
    }

    private void clearSearching()
    {
        searchEventsInput = "";
        searchSocietiesInput = "";
        isSearchingEvents = false;
        isSearchingSocieties = false;
    }
}