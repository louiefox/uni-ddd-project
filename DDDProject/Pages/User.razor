@page "/user"
@inject ICookie cookie
@inject NavigationManager uriHelper;

@using DDDProject.Data
@inject LoginService loginService
@inject SocietyDataService societyDataService

@if (!ClientLoginService.IsLoggedIn)
{
    <div class="container">
        <div class="form">
            <div class="login-form-field">
                <h1>Student ID</h1>
                <input type ="text" @bind="@usernameInput" @oninput="@((e) => usernameInput=(string)e.Value)">       
            </div>

            <div class="login-form-field">
                <h1>Password</h1>
                <input type="password" @bind="@passwordInput" @oninput="@((e) => passwordInput=(string)e.Value)">
            </div>

            <button class="login-button" @onclick="LoginButton">Sign in</button>
            <h1 class="login-button-spacer">Or</h1>
            <button class="login-button login-button-signup" @onclick="@(() => CreateErrorMessage("Sign ups are disabled"))">Sign up</button>

            @if (errorMessage != "")
            {
                <div class="login-error-message">
                    ERROR: @errorMessage
                </div>
            }
        </div>

        <img class="login-image" src="login_page_art.png">
    </div>
}
else if(!editing)
{
    <div class="profile-container">
        <div class="left-side">
            <div class="profile-info">
                <div class="profile-image"></div>
                <div class="profile-text">
                    <h1>@ClientLoginService.Fullname @ClientLoginService.Username</h1>
                    <h2>@ClientLoginService.ProfileDepartment</h2>
                    <div class ="sns_image">
                        <img src ="icon_instagram.png" width="35px" hight ="35px">
                        <img src ="icon_facebook.png" width="35px" hight ="35px">
                        <img src ="icon_discord.png" width="35px" hight ="35px">
                    </div>
                </div>      
                <button class="profile-edit" @onclick="StartEditing">Edit</button>           
            </div>

            <h1>Bio:</h1>
            <div class="profile-bio">
                @ClientLoginService.ProfileBio
            </div>
        </div>
        <div class="right-side">
            @foreach (SocietyData society in mySocietiesDisplayList)
            {
                <a class="profile-society" href="/society/@society.SocietyID">
                    <span class="oi oi-@society.Icon" aria-hidden="true"></span>
                </a>
            } 
            <div class = "logout-conner">           
                <button class="profile-sign-out" @onclick="LogoutButton">Sign out</button> 
            </div>
        </div>
    </div>
}
else
{
    <div class="profile-container">
        <div class="left-side">
            <div class="profile-info">
                <div class="profile-image"></div>
                <div class="profile-text">
                    <h1>@ClientLoginService.Fullname @ClientLoginService.Username</h1>
                    <input type="text" @bind="@ClientLoginService.ProfileDepartment" @oninput="@((e) => departmentEdit=(string)e.Value)" />         
                </div>       
            </div>

            <h1>Bio:</h1>
            <div class="profile-bio">
                <textarea @bind="@ClientLoginService.ProfileBio" @oninput="@((e) => bioEdit=(string)e.Value)" />
            </div>

            <div class = edit-buttons>
                <button class="profile-save" @onclick="SaveEdits">Save</button>
                <button class="profile-cancel" @onclick="() => editing = false">Cancel</button>
            </div>
        
        </div>
        <div class="right-side"> </div>
    </div>
}

@code {
    private string usernameInput { get; set; }
    private string passwordInput { get; set; }
    private string errorMessage = "";

    private string departmentEdit = "Loading";
    private string bioEdit =  "Loading";
    private bool editing = false;

    private List<SocietyData> mySocietiesDisplayList = new();

    protected override async Task OnInitializedAsync()
    {
        if(ClientLoginService.IsLoggedIn)
        {
            List<SocietyData> mySocietiesList = await societyDataService.RequestMySocieties(ClientLoginService.LoginToken);
            for(int i = 0; i < Math.Min(mySocietiesList.Count, 4); i++)
            {   
                mySocietiesDisplayList.Add(mySocietiesList.ToArray()[i]);
            }
        }
    }

    private async void LoadLoginCookies()
    {
        ClientLoginService.LoginToken = await cookie.GetValue( "logintoken" );

        if(ClientLoginService.IsLoggedIn)
        {
            await ClientLoginService.FetchUserInfo();
        }
        
        await InvokeAsync(StateHasChanged);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            LoadLoginCookies();

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task CreateErrorMessage(string message)
    {
        errorMessage = message;

        await Task.Delay(3000);

        errorMessage = "";
        await InvokeAsync(StateHasChanged);
    }

    private async void LoginButton()
    {
        try
        {
            string loginToken = await loginService.RequestLoginToken(usernameInput, passwordInput);
            await cookie.SetValue( "logintoken", loginToken );

            ClientLoginService.LoginToken = loginToken;
            await ClientLoginService.FetchUserInfo();

            await InvokeAsync(StateHasChanged);

            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        }
        catch(Exception e)
        {
            CreateErrorMessage(e.Message);
        }
    }

    private async void LogoutButton()
    {
        ClientLoginService.LoginToken = "";
        await cookie.SetValue( "logintoken", "" );
        await InvokeAsync(StateHasChanged);
    }

    private void StartEditing()
    {
        editing = true; 
        departmentEdit = ClientLoginService.ProfileDepartment;
        bioEdit = ClientLoginService.ProfileBio;
    }

    private async void SaveEdits()
    {
        editing = false;

        try
        {
            await loginService.RequestSetProfile(ClientLoginService.LoginToken, departmentEdit, bioEdit);
            await ClientLoginService.FetchUserInfo();

            await InvokeAsync(StateHasChanged);

            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        }
        catch(Exception e)
        {
            CreateErrorMessage(e.Message);
        }
    }
}

