@page "/user"
@inject ICookie cookie

<div class="container">
    @if (!_isLoggedIn)
    {
        <div class="form">
            <div class="login_form_email">
                <label>Email</label><br/>
                <input type ="text" name="email">       
            </div>

            <div class ="login_form_password">
                <label>Password</label><br/>
                <input type="password" name="password">
            </div>

            <div class = "login_form_buttom">
                <button class="btn_signin" @onclick="LoginButton">Sign in</button>
                <h1>or</h1>
                <button class="btn_signup">Sign up</button>
            </div>

            <div class="login_image">
                <img src="login_page_art.png" width="844" height="526">
            </div>
        </div>
    }
    else
    {
        <button class="btn_signin" @onclick="LogoutButton">Sign out</button>
    }
</div>

@code {
    private bool _isLoggedIn = false;

    private async void LoadLoginCookies()
    {
        LoginService.IsLoggedIn = await cookie.GetValue( "loggedin" ) == "1";
        _isLoggedIn = LoginService.IsLoggedIn;
        await InvokeAsync(StateHasChanged);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            LoadLoginCookies();

        return base.OnAfterRenderAsync(firstRender);
    }

    private async void LoginButton()
    {
        _isLoggedIn = true;

        LoginService.IsLoggedIn = true;
        await cookie.SetValue( "loggedin", "1" );
        await InvokeAsync(StateHasChanged);
    }

    private async void LogoutButton()
    {
        _isLoggedIn = false;

        LoginService.IsLoggedIn = false;
        await cookie.SetValue( "loggedin", "0" );
        await InvokeAsync(StateHasChanged);
    }
}