@page "/user"
@inject ICookie cookie
@inject NavigationManager uriHelper;

@using DDDProject.Data
@inject LoginService loginService

@if (!ClientLoginService.IsLoggedIn)
{
    <div class="container">
        <div class="form">
            <div class="login_form_email">
                <label>Student ID</label><br/>
                <input type ="text" @bind="@usernameInput" @oninput="@((e) => usernameInput=(string)e.Value)">       
            </div>

            <div class ="login_form_password">
                <label>Password</label><br/>
                <input type="password" @bind="@passwordInput" @oninput="@((e) => passwordInput=(string)e.Value)">
            </div>

            <div class = "login_form_buttom">
                <button class="btn_signin" @onclick="LoginButton">Sign in</button>
                <h1>or</h1>
                <button class="btn_signup">Sign up</button>
            </div>

            <h2>@errorMessage</h2>

            <div class="login_image">
                <img src="login_page_art.png" width="844" height="526">
            </div>
        </div>
    </div>
}
else if(!editing)
{
    <div class="profile-container">
        <div class="left-side">
            <div class="profile-info">
                <div class="profile-image"></div>
                <div class="profile-text">
                    <h1>@ClientLoginService.Fullname @ClientLoginService.Username</h1>
                    <h2>@Department</h2>
                    <div class ="sns_image">
                        <img src ="icon_instagram.png" width="35px" hight ="35px">
                        <img src ="icon_facebook.png" width="35px" hight ="35px">
                        <img src ="icon_discord.png" width="35px" hight ="35px">
                    </div>
                </div>      
                <button class="profile-edit" @onclick= " () => editing = true" >Edit</button>               
            </div>

            <h1>Bio:</h1>
            <div class="profile-bio">
                @Bio
            </div>
        </div>
        <div class="right-side">
            <div class="profile-society">
                <span class="oi oi-play-circle" aria-hidden="true"></span>
            </div>
            <div class="profile-society">
                <span class="oi oi-book" aria-hidden="true"></span>
            </div>
            <div class="profile-society">
                <span class="oi oi-musical-note" aria-hidden="true"></span>
            </div>
            <div class="profile-society">
                <span class="oi oi-flash" aria-hidden="true"></span>
            </div> 
            <div class = "logout-conner">           
                <button class="profile-sign-out" @onclick="LogoutButton">Sign out</button> 
            </div>
        </div>
    </div>
}
else
{
    <div class="profile-container">
        <div class="left-side">
            <div class="profile-info">
                <div class="profile-image"></div>
                <div class="profile-text">
                    <h1>@ClientLoginService.Fullname @ClientLoginService.Username</h1>
                    <input type="text" @bind="@Department" />               
                </div>      
                <button class="profile-edit" @onclick= " () => {editing = true; DepartmentBackup = Department; BioBackup = Bio;}" >Edit</button>               
            </div>

            <h1>Bio:</h1>
            <div class="profile-bio">
                <textarea @bind="@Bio"></textarea>
            </div>

            <div class = edit-buttons>
                <button class="profile-save" @onclick="() => editing = false">Save</button>
                <button class="profile-cancel" @onclick="() => {editing = false; Department = DepartmentBackup; Bio = BioBackup;}">Cancel</button>
            </div>
        
        </div>
        <div class="right-side"> </div>
    </div>
}

@code {
    private string usernameInput { get; set; }
    private string passwordInput { get; set; }

    private string errorMessage = "";

    private string Department = "2nd Year Computer Science";
    private string Bio =  " I love socks!";

    private string DepartmentBackup = "2nd Year Computer Science";
    private string BioBackup =  "I love socks!";

    private bool editing = false;

    private async void LoadLoginCookies()
    {
        ClientLoginService.LoginToken = await cookie.GetValue( "logintoken" );
        ClientLoginService.Username = await cookie.GetValue( "logintoken" );

        if(ClientLoginService.IsLoggedIn)
            ClientLoginService.FetchUserInfo();
        
        await InvokeAsync(StateHasChanged);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            LoadLoginCookies();

        return base.OnAfterRenderAsync(firstRender);
    }

    private async void LoginButton()
    {
        try
        {
            string loginToken = await loginService.RequestLoginToken(usernameInput, passwordInput);
            await cookie.SetValue( "logintoken", loginToken );

            ClientLoginService.LoginToken = loginToken;
            ClientLoginService.Username = loginToken;
            ClientLoginService.FetchUserInfo();

            await InvokeAsync(StateHasChanged);

            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private async void LogoutButton()
    {
        ClientLoginService.LoginToken = "";
        await cookie.SetValue( "logintoken", "" );
        await InvokeAsync(StateHasChanged);
    }

}

