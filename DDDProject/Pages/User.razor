@page "/user"
@inject ICookie cookie
@inject NavigationManager uriHelper;

@using DDDProject.Data
@inject LoginService loginService

@if (!_isLoggedIn)
{
    <div class="container">
        <div class="form">
            <div class="login_form_email">
                <label>Student ID</label><br/>
                <input type ="text" @bind="@_username" @oninput="@((e) => _username=(string)e.Value)">       
            </div>

            <div class ="login_form_password">
                <label>Password</label><br/>
                <input type="password" @bind="@_password" @oninput="@((e) => _password=(string)e.Value)">
            </div>

            <div class = "login_form_buttom">
                <button class="btn_signin" @onclick="LoginButton">Sign in</button>
                <h1>or</h1>
                <button class="btn_signup">Sign up</button>
            </div>

            <h2>@errorMessage</h2>

            <div class="login_image">
                <img src="login_page_art.png" width="844" height="526">
            </div>
        </div>
    </div>
}
else
{
    <div class="profile-container">
        <div class="left-side">
            <div class="profile-info">
                <div class="profile-image"></div>
                <div class="profile-text">
                    <h1>@ClientLoginService.Fullname @ClientLoginService.Username</h1>
                    <h2>2nd Year Computer Science</h2>
                    <div class ="sns_image">
                        <img src ="icon_instagram.png" width="35px" hight ="35px">
                        <img src ="icon_facebook.png" width="35px" hight ="35px">
                        <img src ="icon_discord.png" width="35px" hight ="35px">
                    </div>
                </div>      
                <button class="profile-edit" @onclick="LogoutButton" >Edit</button>               
            </div>
            

            <h1>Bio:</h1>
            <div class="profile-bio">
                I love socks!
            </div>
        </div>
        <div class="right-side">
            <div class="profile-society">
                <span class="oi oi-play-circle" aria-hidden="true"></span>
            </div>
            <div class="profile-society">
                <span class="oi oi-book" aria-hidden="true"></span>
            </div>
            <div class="profile-society">
                <span class="oi oi-musical-note" aria-hidden="true"></span>
            </div>
            <div class="profile-society">
                <span class="oi oi-flash" aria-hidden="true"></span>
            </div> 
            <div class = "logout-conner">           
                <button class="profile-sign-out" @onclick="LogoutButton">Sign out</button> 
            </div>
        </div>
    </div>
}

@code {
    private string _username { get; set; }
    private string _password { get; set; }
    private bool _isLoggedIn = false;

    private string errorMessage = "";

    private async void LoadLoginCookies()
    {
        ClientLoginService.IsLoggedIn = await cookie.GetValue( "loggedin" ) == "1";
        ClientLoginService.Username = await cookie.GetValue( "logintoken" );
        _isLoggedIn = ClientLoginService.IsLoggedIn;
        await InvokeAsync(StateHasChanged);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            LoadLoginCookies();

        return base.OnAfterRenderAsync(firstRender);
    }

    private async void LoginButton()
    {
        try
        {
            string loginToken = await loginService.RequestLoginToken(_username, _password);
            
            _isLoggedIn = true;

            ClientLoginService.IsLoggedIn = true;
            ClientLoginService.Username = loginToken;
            ClientLoginService.FetchUserInfo();
            
            await cookie.SetValue( "loggedin", "1" );
            await cookie.SetValue( "logintoken", loginToken );

            await InvokeAsync(StateHasChanged);

            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private async void LogoutButton()
    {
        _isLoggedIn = false;

        ClientLoginService.IsLoggedIn = false;
        ClientLoginService.Username = "";
        await cookie.SetValue( "loggedin", "0" );
        await cookie.SetValue( "logintoken", "" );
        await InvokeAsync(StateHasChanged);
    }
}