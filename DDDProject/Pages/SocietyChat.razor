@page "/chat/{societyID}"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;

<div class="container">
    <div class="left-side">
        <a class="return-button" href="/society/@societyID">
            <span class="oi oi-arrow-left" aria-hidden="true" style="margin-right: 0.25rem"></span>
            Back to Society Page
        </a>
        <div class="announcements">
            <h1>Announcements</h1>
            <h2>The hoodies are ready! Come to the next meeting to collect yours</h2>
            <h3>19 Feb, 2023</h3>
            <h2>Come to the next meeting to decide on our next movie.</h2>
            <h3>11 Feb, 2023</h3>
        </div>
    </div>

    <div class="chat-section">
        <div class="alert alert-secondary mt-4" role="alert">
            <span class="oi oi-person mr-2" aria-hidden="true"></span>
            <span>You are connected as <b>@_username</b></span>
            <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
        </div>
        <div class="scrollcontainer">
            <div id="scrollbox" class="scrollbox">
                @foreach (var item in _messages)
                {
                    @if (item.IsNotice)
                    {
                        <div class="alert alert-info">@item.Body</div>
                    }
                    else
                    {
                        <div class="@item.CSS">
                            <div class="msg-background" style="background-color: @item.BackgroundColor; padding-left: @(item.Mine ? 1 : 0)rem;">
                                @if (!item.Mine)
                                {
                                    <img class="avatar" src="avatar_default.jpg">
                                }
                                <div class="msg-content">
                                    <div class="user">@item.Username</div>
                                    <div class="msg">@item.Body</div>
                                </div>
                            </div>
                        </div>
                    }
                }
                <hr />
            </div>
        </div>
        <div class="message-entry">
            <textarea class="input-lg" placeholder="Type your message here" @bind="@_newMessage"></textarea>
            <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string societyID { get; set; }

    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username = "Placeholder";

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        };

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + SocietyChatHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);
            _hubConnection.On<string>("OnClientConnected", OnClientConnected);
            _hubConnection.On<string>("UserConnected", UserConnected);
            _hubConnection.On<string>("UserDisconnected", UserDisconnected);

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void OnClientConnected(string username)
    {
        _username = username;
        InvokeAsync(StateHasChanged);
        // Debug message
        // SendAsync("This is a test message.");
    }

    private void UserConnected(string username)
    {
        Message msg = new Message("", $"[Notice] {username} joined chat room.");
        msg.IsNotice = true;
        _messages.Add(msg);

        InvokeAsync(StateHasChanged);
    }

    private void UserDisconnected(string username)
    {
        Message msg = new Message("", $"[Notice] {username} left chat room.");
        msg.IsNotice = true;
        _messages.Add(msg);

        InvokeAsync(StateHasChanged);
    }

    private void BroadcastMessage(string name, string message)
    {
        Message msg = new Message(name, message);
        msg.Mine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);
        _messages.Add(msg);

        InvokeAsync(StateHasChanged);
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body)
        {
            Username = username;
            Body = body;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public bool IsNotice { get; set; }

        public string CSS => Mine ? "sent" : "received";
        public string BackgroundColor => Mine ? "#33673B50" : "#AECFC1";
    }
}